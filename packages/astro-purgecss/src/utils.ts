import { blue, dim, green, red } from 'kleur/colors';
import { createHash } from 'node:crypto';
import { readFile, unlink, writeFile } from 'node:fs/promises';
import { fileURLToPath } from 'node:url';

export async function readFileContent(filePath: string): Promise<string> {
  try {
    const content = await readFile(filePath, 'utf8');
    return content;
  } catch (err) {
    error(`Error reading file ${filePath}: ${err}`);
    return '';
  }
}

export async function writeFileContent(filePath: string, content: string) {
  try {
    await writeFile(filePath, content, 'utf8');
  } catch (err) {
    error(`Error writing file ${filePath}: ${err}`);
    return '';
  }
}

export function replaceValueInFile(
  filePath: string,
  content: string,
  searchValue: string,
  replaceValue: string
): string {
  try {
    if (content.includes(searchValue)) {
      return content.replace(new RegExp(searchValue, 'g'), replaceValue);
    }

    return content;
  } catch (err) {
    error(`Error processing file ${filePath}: ${err}`);
    return '';
  }
}

// Clean from extra slash on windows and trailing forward slash on non-windows
export function cleanPath(file: URL): string {
  let path = fileURLToPath(file);

  // Remove trailing forward slash if present
  path = path.replace(/\/+$/, '');

  if (process.platform !== 'win32') return path;

  // Remove leading forward slash if present
  return path.replace(/^\/+/, '');
}

export async function writeCssFile({
  css,
  file
}: {
  css: string;
  file: string;
}) {
  // Skip re-hashing a file if it's not generated by Astro ex: assets/styles/light.css
  if (!file.includes('_astro/')) {
    await writeFileContent(file, css);
    return [file, file];
  }

  // Get content hash before writing to file
  const hash = createHash('sha256').update(css).digest('hex').substring(0, 8);

  // Generate new file name with hash
  // Astro orignal hash is 8 characters long
  const newFile = `${file.slice(0, -13)}.${hash}.css`;

  // Write purged CSS to new file
  await writeFileContent(newFile, css);

  // Remove old file
  await unlink(file);

  return [file, newFile];
}

export const dt = new Intl.DateTimeFormat('en-us', {
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit',
  hour12: false
});

export function success(message: string) {
  const date = dt.format(new Date());
  console.log(dim(date), green('▶'), message);
}

export function error(message: string) {
  const date = dt.format(new Date());
  console.error(dim(date), red('▶'), message);
}

export function headline(message: string) {
  const date = dt.format(new Date());
  console.log(dim(date), blue('[purgecss]'), message);
}
